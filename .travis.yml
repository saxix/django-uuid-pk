language: python
services:
  - MySQL
  - PostgreSQL
python:
  - 2.7
env:
  - DJANGO="Django==1.4.5" DBENGINE=mysql
  - DJANGO="Django==1.4.5" DBENGINE=postgres

  - DJANGO="Django==1.5.2" DBENGINE=mysql
  - DJANGO="Django==1.5.2" DBENGINE=postgres

  - DJANGO="https://www.djangoproject.com/download/1.6b2/tarball/" DBENGINE=postgres

install:
  - pip install uuid python-coveralls coverage pytest pytest-cov pytest-django
  - sh -c "if [ '$DBENGINE' = 'postgres' ]; then pip install -q psycopg2; fi"
  - sh -c "if [ '$DBENGINE' = 'mysql' ]; then pip install -q MySQL-python; fi"
  - pip install -q $DJANGO

script:
  - make coverage

before_install:
  - sh -c "if [ '$DBENGINE' = 'postgres' ]; then psql -c 'DROP DATABASE IF EXISTS django_uuid_pk;' -U postgres; fi"
  - sh -c "if [ '$DBENGINE' = 'mysql' ]; then mysql -e 'DROP DATABASE IF EXISTS django_uuid_pk;'; fi"

before_script:
  - sh -c "if [ '$DBENGINE' = 'postgres' ]; then psql -c 'CREATE DATABASE django_uuid_pk;' -U postgres; fi"
  - sh -c "if [ '$DBENGINE' = 'mysql' ]; then mysql -e 'create database IF NOT EXISTS django_uuid_pk;'; fi"

matrix:
  exclude:
    - python: 3.2
      env: DJANGO="Django==1.4.5" DBENGINE=mysql
    - python: 3.2
      env: DJANGO="Django==1.4.5" DBENGINE=postgres
    - python: 3.2
      env: DJANGO="Django==1.5.1" DBENGINE=mysql

after_success:
  - coveralls -c django_uuid_pk/tests/.coveragerc
